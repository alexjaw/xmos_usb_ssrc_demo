.. include:: ../../README.rst

|newpage|

Overview
--------

Introduction
............

The XMOS Asynchronous Sample Rate Converter (ASRC) provides a way of streaming high quality audio between the two clock domains which are not synchronized. The ASRC library itself is a function call that operates on blocks of samples whereas the SPDIF and |i2s| peripheral libraries provide streaming audio one sample at a time. To fit the ASRC between two audio streaming components requires a software framework that provides buffering and a precise rate difference calculation.


Block Diagram
.............

.. figure:: images/task_diagram.pdf
   :width: 100%

   Application Task Diagram

The application uses a number of tasks to send and receive audio samples, convert from serial (streaming) samples to block buffers, time-stamp and monitor the stream rates and of course perform the sample rate conversion. In addition, there are a number of control tasks to complete the application including configuration of the codecs via |i2c| and GPIO, reading and de-bouncing of the button and displaying information via a matrix of 4 x 4 multiplexed LEDs. 

The arrows between tasks show the direction of data-flow between tasks, be it over interfaces or channels. Note that this is not always the same as whether a task communication role is client or server. The roles of the task communications are described later in this application note. 


SPDIF Receive to I2S using ASRC Demo
------------------------------------

The Makefile
............

To start using the ASRC, you need to add ``lib_src`` to your Makefile::

  USED_MODULES = ... lib_src ...

This demo also uses the |i2c| library (``lib_i2c``), the GPIO library (``lib_gpio``), |i2s| and SPDIF libraries (``lib_i2s``, ``lib_spdif``) and the logging library (``lib_logging``) to provide a lightweight version of printf(). The GPIO library abstracts the use of an 8-bit port to drive individual reset and select lines, as well as a 4-bit port for reading the buttons. The SPDIF library provides the source of audio samples, with encoded clock, from the SPDIF receive digital input. The |i2s| library provides an audio sink using |i2s| output to drive a DAC.

So the Makefile also includes the following modules::

  USED_MODULES = .. lib_gpio lib_i2c lib_i2s lib_logging lib_spdif ..


Includes
........

All xC files which declare the application ``main()`` function consisting of tasks on multiple tiles need to include ``platform.h``. XMOS xCORE specific defines for declaring and initialising hardware are defined in ``xs1.h``. ``string.h`` provides the ``memset()`` function. 

.. literalinclude:: main.xc
   :start-on: include <xs1.h>
   :end-on: include <string.h>


The ASRC library functions are defined in ``src.h``. This header must be included in your code to use the library as it provides the public API to the ASRC function.

.. literalinclude:: main.xc
   :start-on: include "src.h"
   :end-on: include "assert.h"

The are four application includes which have the following purposes. ``block_serial.h`` provides access to the buffer serialization and de-serialization functions, ``main.h`` provides access to the application helper functions within main.xc & ``cs4384_5368.h`` provides access to the audio CODEC configuration tasks. All contain prototypes of the functions/tasks contained within thier respective xC source files as well as defining types of variables and interfaces used to communicate with them.


.. literalinclude:: main.xc
   :start-on: include "main.h"
   :end-on: include "app_config.h"

The header file ``app_config.h`` contains defines that are used to configure the application settings including the number of channels, ASRC input block size and maximum input to output ratio (used for defining buffer sizes) and number of logical cores used to carry out the ASRC processing. It also includes information about the local MCLK frequencies used for driving the |i2s| interface. Note that no MCLK information is required for SPDIF receive because the received samples are timestamped which allows the application to recover the precise sample rate directly.

.. literalinclude:: app_config.h
   :start-on: define     ASRC_N_CHANNELS
   :end-on: define     MCLK_FREQUENCY_44

Allocating hardware resources
.............................

The audio interfaces require I/O ``ports`` to communicate with the external components, as well as ``clock blocks`` to manage the rate of I/O operations. All ports and clock blocks must be declared on the tile they reside since the chip used in the hardware has two tiles. 

In the case of SPDIF receive, it needs only a single 1-bit port and clock block.

.. literalinclude:: main.xc
   :start-on: #define SPDIF_TILE
   :end-on: clock clk_spdif_rx


|i2s| requires multiple 1-bit ports for MCLK input, BCLK output, LRCLK output and DATA, as well as two clock blocks for managing MCLK and BCLK. 

.. literalinclude:: main.xc
   :start-on: #define AUDIO_TILE
   :end-on: XS1_PORT_1P};

To support human input and visual output from within the application further I/O ports are declared which map to the buttons and LEDs on the hardware. In addition, there is an 8-bit output port which controls the reset pins configures the clocking modes on the board. Together with configuration via |i2c|, this allows the DAC and ADC to be setup as required for the application.

.. literalinclude:: main.xc
   :start-on: out port port_leds_col
   :end-on: port port_buttons

The application main() function
...............................

The ``main()`` function in the program sets up the tasks in the application.

Firstly, the ``interfaces`` and ``channels`` are declared. In xC interfaces and channels provide a means of concurrent tasks communicating with each other. Each interface has a concept of ``client`` and ``server`` where the client initiates the communication and the server responds. Typically, a server is waiting for commands or data to be sent from the client whereupon it performs some processing. The processing may result in a response on the same interface, an I/O event, initiation of a transaction on another interface or a change in some state which may be queried later by another client. All of these cases are demonstrated within this application. A total of 21 interfaces are used to provide communication between the tasks.

.. literalinclude:: main.xc
   :start-on: serial_transfer_push_if i_serial_in;
   :end-on: streaming chan c_spdif_rx;

In addition to the interfaces, a single channel is used in which is required by the ``lib_spdif`` component. This component uses a streaming channel for performance reasons as it provides a short FIFO allowing outputs within that component to be decoupled. 

A version of the task diagram, annotated with the communication roles (Client or Server) is shown below.


.. figure:: images/communication_roles.pdf
   :width: 100%

   Communication Roles Between Tasks

|newpage|


The rest of the ``main`` function starts all the tasks in parallel using the xC ``par`` construct:

.. literalinclude:: main.xc
   :start-on: par{
   :end-on: return 0


This code starts all of the tasks in parallel. Note that each task has an ``on tile[]`` placement directive which maps that particular task to a tile. For example, the |i2s| task must run on the tile to which the DAC is connected on the hardware.


.. tip::
   The ``rate_server()``, ``spdif_handler()``, ``button_listener()`` and ``input_gpio_with_events()`` tasks are instantiated from their own ``par{}`` statement. This allows them to be started with the common attributes ``combine`` and ``ordered``. ``Combine`` instructs the compiler to flatten the tasks into a single large task and ``ordered`` allows the select cases in the combined task to fire in a given order. In this case, we need to prioritize ``spdif_handler()`` to preserve the client -> server communication flow within the signal chain and avoid deadlock.

.. tip::
   The ``asrc()`` task is preceded by a for-loop like construct ``par(int i=0; i<ASRC_N_INSTANCES; i++)``. This construct is called a parallel replicator and instantiates ``ASRC_N_INSTANCES`` instances of the ``asrc()`` task. The index within the replicator allows the interface array passed to the task to be indexed appropriately.

.. tip::
   Tasks marked as ``distributable`` have their ``select{}`` cases automatically distributed across logical cores by the compiler. The tasks must reside of the same tile for this to be possible. For further information regarding distributable and combinable tasks, please see section 2.3 of the XMOS Programming guide "Creating tasks for flexible placement".

|newpage|

Audio Source and Sink
.....................

The ASRC allows two audio clock domains to be bridged. In order to effectively demonstrate this, SPDIF receive was chosen as the audio source because it is synchronized to the clock of the SPDIF transmitter, which is external to the hardware used. The |i2s| audio output has it's own local clock driven by a crystal source on the xCORE-200 Multichannel Audio Platform.

The usage and operation of the SPDIF and |i2s| functions is described in the associated documentation for those libraries.


Configuring audio codecs
........................

Two audio codecs are used on the xCORE-200 Multichannel Audio Platform. A Cirrus CS5368 for audio input and a Cirrus CS4384 for audio output, although only the output path is used for this demonstration. These codecs have to be configured before they can be used. The ``audio_codec_cs4384_cs5368()`` task handles this via an interface call over ``i_codec`` which in turn makes a call to methods in the ``i_i2c`` client interface and ``i_gpio`` client interfaces to make the necessary hardware settings.

.. literalinclude:: cs4384_5368.xc
   :start-after: [[distributable]]
   :end-on: client output_gpio_if i_mclk_fsel)

.. tip::
   If you are porting this application to a different xCORE development board then this is the function that will have to be modified to configure the relevant codecs for that board.

The usage and operation of |i2c| and GPIO functions is described in the associated documentation for those libraries.


SPDIF Handler
.............

The SPDIF library uses a channel interface to receive samples from the SPDIF receiver component. The rest of the application uses xC interfaces to communicate and so a thin task is included which simply receives samples and forwards them to the next stage over an interface. Because this task initiates the communication, it is connected to the client side of the downstream interface.

.. literalinclude:: main.xc
   :start-after: [[combinable]] //Run on same core as other tasks if possible
   :end-on: void spdif_handler(streaming chanend c_spdif_rx, client serial_transfer_push_if i_serial_in)

I2S Handler
...........

The purpose of the |i2s| handler is to provide samples to |i2s| immediately when required and pull samples from the generic block2serial interface as needed. The interface to the upstream ``block2serial()`` task is a client interface meaning that samples are actively requested. It is a thin task that abstracts the |i2s| interface away from block2serial and can easily be modified for different audio sinks.

.. literalinclude:: main.xc
   :start-after: pragma unsafe arrays   //Performance optimisation of |i2s|_handler task
   :end-on: void |i2s|_handler(

In addition, the |i2s| handler calls a method in the ``i_codec`` client interface to request reconfiguration of the hardware on a sample rate change event. It also listens on the ``i_buttons`` server side interface to see when a change in sample rate is requested via user input, and restarts the |i2s| component at the new sample rate.


Serial to Block
...............

The ASRC processing receives blocks of samples whereas the SPDIF receive component provides left/right samples one at a time. This means we need a task that fills a block buffer up with samples until it is full, whereupon it passes the entire block to the ASRC tasks. The ``serial2block()`` task receives streaming samples on the server side of the ``i_serial_in`` interface and pushes out block of samples on the ``i_block_transfer`` client side interface. Because there are multiple ASRC tasks, ``i_block_transfer`` is an array of interfaces, where the left and right samples are separated out into individual paths.

.. literalinclude:: block_serial.xc
   :start-after: pragma unsafe arrays   //Performance optimisation for serial2block. Removes bounds check
   :end-on: void serial2block(server serial_transfer_push_if i_serial_in, client block_transfer_if i_block_transfer[ASRC_N_INSTANCES], server sample_rate_enquiry_if i_input_rate)


The input block size to the ASRC is fixed on initialization and the rate is matched on both sides so the buffer scheme used for the block can be a simple double buffer (ping-pong). This allows one side of the double buffer to be filled while the other is emptied. See the lib_src documentation for details on the buffer format expected by ASRC.

.. figure:: images/buffering.pdf
   :width: 100%

   Use of Buffers within the Application


The Serial to Block task has one additional function which is to timestamp the samples it receives on the serial input interface. When queried over the ``i_sr_input`` server side interface, it returns the number of samples and elapsed time. Using a 10ns timer and a query rate of 20ms, for example, it allows a theoretical rate measurement accuracy of 0.5PPM.

The Serial to Block function is designed to be generic so that it can be used with a range of audio sources. Only the ``SPDIF Handler`` task needs to be customized when adapting this demonstration for use with other audio sources.


Block to Serial
...............

The Block to Serial function provides the opposite functionality to Serial to Block; that is it takes blocks of samples from the ASRC output and serves up a serial stream to the the downstream audio sink. You may have noticed from the commincation roles diagram that this is the task which consists purely of server interfaces. This is because it is the task which provides elasticity within the data path.

.. literalinclude:: block_serial.xc
   :start-after: pragma unsafe arrays   //Performance optimisation for block2serial. Removes bounds check
   :end-on: unsafe void block2serial(

However, it differs from Serial to Block in one main aspect. The output from ASRC is a *variable* size block of samples, the size of which will vary on each call to the ASRC. This means a double-buffer scheme cannot be used because it doesn't provide any support for varying block sizes. This would especially be an issue where the emptying block is a different size to the filling block, which often occurs.

To solve this problem, a FIFO is used which introduces some elasticity permitting the varying rates. The FIFO has been enhanced to support filling using contiguous blocks, which is required for maximum efficiency at the output of the ASRC which expects contiguous memory. Use of the FIFO has the added benefit that the fill level can be monitored. The fill level provides important information about the rate ratio between input and output and effectively provides an **I** term for a PI loop, which is necessary for the rate matching servo algorithm to work. See the Rate Server section for further details.

The FIFO also helps buffer any small errors in rate difference when either the source or sink rate wanders. The size of the FIFO is set by ``OUT_FIFO_SIZE`` and is initialized to eight times the maximum number of samples that will be produced by a single call to the ASRC function.

.. literalinclude:: app_config.h
   :start-after: define     ASRC_N_CHANNELS
   :end-on: define     OUT_FIFO_SIZE

To enable the use of C-style pointers (without bounds checking to improve performance and to enable compatibility with C-code), unsafe pointers have been used. This requires that the entire scope of this block is declared unsafe to indicate to the reader that memory safety is maintained by the code's functionality rather than the compiler.

.. caution::
   The ``serial2block()``, ``asrc()`` and ``block2serial()`` tasks must reside on the same tile because they use a shared memory interface to provide the highest performance data passing between tasks.

Rate Server
...........

The Rate Server function performs an essential function with the ASRC demonstration. It monitors the rate of the input and output streams and calculates the ``fs_ratio`` (sample rate ratio) to be provided to the ASRC algorithm each time it is called. The Rate Server acquires information regarding stream rate and FIFO fill level from the serial/block tasks via client side interfaces ``i_spdif_rate`` and ``i_2s_rate`` on a periodic basis. It then implements a PI controller and applies some simple filtering using a first order low pass filter to reduce any jitter introduced from rate measurements. The calculated fs_ratio is served up to the ASRC tasks via the ``i_fs_ratio`` server side interface using the ``get_ratio`` method.

.. literalinclude:: main.xc
   :start-on: void rate_server(client sample_rate_enquiry_if i_spdif_rate, client sample_rate_enquiry_if i_i2s_rate,
   :end-on: server fs_ratio_enquiry_if i_fs_ratio[ASRC_N_INSTANCES], client led_matrix_if i_leds)

It uses an unsigned Q20.12 fixed point variable to calculate the current sample rate and passes the calculated and filtered fs_ratio to the ASRC task using an unsigned Q4.28 fixed point representation.

The Rate Server also calculates the nominal sample rate using a table which specifies the range of values considered acceptable. The table is initialized to accept a deviation of up to 1000PPM, as supported by the ASRC library.

.. literalinclude:: main.xc
   :start-on: define SR_TOLERANCE_PPM 
   :end-on: define UPPER_LIMIT(freq)

The nominal sample rates are monitored for change and written to a VALID/INVALID flag. For example, a change in rate will always transition through an INVALID state. When this occurs, a notification is sent to the ASRC task using the server side interface ``fs_ratio_enquiry_if`` which then queries back to the Rate Server for the nominal sample rate. This information is used to re-initialize the ASRC core filters to support the new major sample rate change.

The Rate Server also acts as a simple application and outputs information about buffer level and sample rates to the LED matrix using the client side interface method``i_leds.set()`` as well as printing internal state to the console on a periodic basis.

The rates at which the fs_ratio is calculated and the internal state is printed to the console is defined by the following values:

.. literalinclude:: main.xc
   :start-on: define SR_CALC_PERIOD
   :end-on: define REPORT_PERIOD


Asynchronous Sample Rate Conversion
...................................

These tasks handle calling the core ASRC algorithm functions. There is one task per audio channel (2) and each is given a dedicated task running on a logical core to ensure that a guaranteed amount of performance is available for the ASRC. 

.. literalinclude:: main.xc
   :start-after: //The ASRC processing task - has it's own logical core to reserve processing MHz
   :end-on: void asrc(server block_transfer_if i_serial2block, client block_transfer_if i_block2serial, client fs_ratio_enquiry_if i_fs_ratio)

There are three interface connections to each of the tasks. Indication of availability of a new sample block is provided by a push method call into the ASRC task over the ``i_serial2block`` interface, which also returns a pointer to the producer for the next buffer to write to. This triggers calling of the asrc_process() function which, on completion, writes the output sample block to the FIFO and notifies downstream using the client side ``i_block2serial`` interface. Included within each of these interface calls is a parameter indicating the number of samples within the block, although this is only used on the output side of the ASRC where this is a variable.

The ASRC processing call is not actually made within the input sample push select case. The reason for this is that the task on the client side of the interface would block until completion of the case (i.e. break; is reached). To allow the ``serial2block`` client to continue unblocked after the sample block push, a flag is set which acts as a guard indicating that the ASRC processing event can be fired on the default case.

An additional ``select`` ``case`` is included within the main select loop which is used to notify the ASRC task of a change in either the input or output nominal sample rates. When this occurs a call to ``asrc_init()`` is made which initializes the ASRC and sets up the cascaded FIR filters to support the new required rate change.

To ensure that 100MHz (Assuming 500MHz core clock) is allocated to each of the ASRC tasks, a built-in function is called to force the logical core to be issued every fifth core clock.

.. literalinclude:: main.xc
   :start-on: set_core_high_priority_on
   :end-before: fs_code_t in_fs_code = samp_rate_to_code(DEFAULT_FREQ_HZ_SPDIF);

LED Driver
..........

The 16 LEDs on the xCORE-200 Multichannel Audio Platform are arranged in a 4x4 matrix and are multiplexed as rows and columns. Consequently, to be able to address each LED individually, a simple task to multiplex the LEDs is included which displays a 16-bit bitmap. The LEDs are set and cleared when the ``i_leds.set()`` server side interface method is called. A timer keeps track of the column multiplexing and outputs the appropriate nibbles in turn to display the 16-bit bitmap on the LEDs. 

.. literalinclude:: main.xc
   :start-on: [[combinable]]void led_driver(server led_matrix_if i_leds, out port port_leds_col, out port port_leds_row)
   :end-before: unsigned col_frame_buffer[4]

The LED matrix display task is a low performance task and can be combined with other tasks onto a single logical core.

Button Listener
...............

A simple task that periodically reads and de-bounces the button inputs is included. It detects when the button is pressed and sends the index of the pressed button over the client side interface method ``i_buttons.pressed()``.

.. literalinclude:: main.xc
   :start-after: //Button listener task
   :end-on: [[combinable]]void button_listener(

The button listener task is a low performance task that is ideal to be combined with other tasks onto a single logical core.

|newpage|

Optimization
............

The task diagram shows the logical tasks defined within the application and the communications between them. However, many of these tasks do not require a whole logical core to function and so can be either combined with or distributed across other tasks, performance requirement permitting. This optimization is made by the compiler, with help from the programmer, by writing tasks with a certain form and by adding attributes as compiler hints. The result of this optimization is that 15 tasks are able to be placed on just 6 logical cores. Further, the LED matrix task has low performance requirements and may be combined with additional user tasks if needed.

The below diagram shows the mapping to physical processing elements (logical cores). Note that the ASRC tasks have been configured to be scheduled once every 5 core clocks to ensure they receive a guaranteed 100MHz, although they will automatically receive this performance level within this example application due to five or less tasks being placed on the tile.

.. figure:: images/logical_cores.pdf
   :width: 100%

   Mapping of Tasks to Logical Cores in xCORE Processor


|appendix|

Demo hardware setup
-------------------

The demo is designed to run on the xCORE-200 Multichannel Audio Platform. To run the
demo:

 * Connect the XTAG-2 or XTAG-3 USB debug adapter to the xCORE-200 Multichannel Audio Platform.
 * Connect the XTAG-2 or XTAG-3 to the host PC using USB extension cable.
 * Connect an optical SPDIF source to the Rx TOSLINK connector.
 * Connect headphones or speakers to the channels 1/2 of the line out 3.5mm jack.
 * Connect the 12V power adapter to the xCORE-200 Multichannel Audio Platform.

.. figure:: images/hardware_setup.pdf
   :scale: 100%
   :align: center

   Hardware setup for XMOS SPDIF to |i2s| using ASRC

|newpage|

Launching the demo device
-------------------------

Once the application source code is imported into the tools it can be built by pressing the :menuitem:`Build` button in xTIMEcomposer. This will create the ``AN00231_ASRC_SPDIF_TO_DAC.xe`` binary in the ``bin`` folder of the project. xTIMEcomposer may have to import the dependent libraries if you do not already have them in your workspace; this will occur automatically on build.

A *Run Configuration* then needs to be set up. This can be done by selecting the :menuitem:`Run,Run Configurations...` menu. You can create a new run configuration by right clicking on the :menuitem:`xCORE application` group in the left hand pane and :menuitem:`New`.

Select your XMOS XTAG in the Target box and click **Apply**. You can
now click the **Run** button to launch the application.

If you wish to view the reported values from the Rate Server task in the console, ensure that the :menuitem:`Run Configurations,Target I/O,xSCOPE via xCONNECT...` option is set. xSCOPE printing is already enabled within the application.

Alternatively, the command line tools can be used to build and run the application.

Building is done by changing to the folder containing the ``src`` sub-folder and doing a call to ``xmake``. Running the application is then done using the command: ``xrun --xscope bin/AN00231_ASRC_SPDIF_TO_DAC.xe``.

The audio from the SPDIF input should now be playing on channels 1/2 of the DAC output.

LED Indicators
..............

The column of four LEDs closest to the analog outputs indicates the sample rate of |i2s|. The column closest the crystal indicates the sample rate of the received SPDIF stream. The two columns in between show the current buffer fill level, where zero indicates exactly half full (the target level). The table below provides further detail of the LED meanings.

.. list-table:: LED Indicator meaning
     :header-rows: 2

     * - 
       - Row
       -
       -
       -
     * - Column
       - 1
       - 2
       - 3
       - 4
     * - 4
       - |i2s| >= 96KHz
       - Buffer > 12 samples
       - Buffer > 6 samples
       - SPDIF >= 96KHz
     * - 3
       - |i2s| >= 88.2KHz
       - N/A
       - Buffer > 0 samples
       - SPDIF >= 88.2KHz 
     * - 2
       - |i2s| >= 48KHz
       - N/A
       - Buffer < 0 samples
       - SPDIF >= 44.1KHz
     * - 1
       - |i2s| >= 44.1KHz
       - Buffer < -12 samples
       - Buffer < -6 samples
       - SPDIF >= 44.1KHz


If the buffer level is exactly half, then no LEDs are illuminated in either columns 2 or 3.

Change the I2S rate
...................

The rate of the |i2s| interface is initialized to 48000 but can be changed at run-time by pressing button 1. Each press of the button cycles through 44.1KHz -> 48KHz -> 88.2KHz -> 96KHz and wraps back to the beginning.

A mute function is included to output zero samples from the point of an |i2s| rate change for a fixed number of sample cycles. This prevents old samples being outputted during the period when ``rate_server()`` detects a change in frequency and re-configures the ASRC.


|newpage|

References
----------

.. nopoints::

 * XMOS Tools User Guide

   http://www.xmos.com/published/xtimecomposer-user-guide

 * XMOS xCORE Programming Guide

   http://www.xmos.com/published/xmos-programming-guide

 * XMOS |i2s|/TDM Library

   http://www.xmos.com/support/libraries/lib_i2s

 * XMOS |i2c| Library

   http://www.xmos.com/support/libraries/lib_i2c

 * XMOS GPIO Library

   http://www.xmos.com/support/libraries/lib_gpio

|newpage|

Full source code listing
-------------------------

Source code for app_config.h
............................

.. literalinclude:: app_config.h
   :largelisting:

Source code for main.h
......................

.. literalinclude:: main.h
   :largelisting:

Source code for main.xc
.......................

.. literalinclude:: main.xc
   :largelisting:

Source code for block_serial.h
...............................

.. literalinclude:: block_serial.h
   :largelisting:

Source code for block_serial.xc
...............................

.. literalinclude:: block_serial.xc
   :largelisting:


Source code for cs4384_5368.h
.............................

.. literalinclude:: cs4384_5368.h
   :largelisting:

Source code for cs4384_5368.xc
..............................

.. literalinclude:: cs4384_5368.xc
   :largelisting:

|newpage|
